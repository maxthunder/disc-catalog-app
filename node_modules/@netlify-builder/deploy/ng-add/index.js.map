{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rule, SchematicContext, SchematicsException, Tree, chain } from '@angular-devkit/schematics';\r\nimport { experimental, JsonParseMode, parseJson } from '@angular-devkit/core';\r\nimport { addPackageJsonDependency, NodeDependency, NodeDependencyType } from 'schematics-utilities';\r\n\r\nfunction addPackageJsonDependencies(): Rule {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        \r\n        // always add the package under dev dependencies\r\n        const dependencies: NodeDependency[] = [\r\n            { type: NodeDependencyType.Dev, version: '~3.1.0', name: '@netlify-builder/deploy' }\r\n        ];\r\n        \r\n        dependencies.forEach(dependency => {\r\n            addPackageJsonDependency(host, dependency);\r\n            context.logger.log('info', `✅️ Added \"${dependency.name}\" into ${dependency.type}`);\r\n        });\r\n\r\n        return host;\r\n    };\r\n}\r\n\r\nfunction getWorkspace(host: Tree): { path: string; workspace: experimental.workspace.WorkspaceSchema } {\r\n    const possibleFiles = ['/angular.json', './angular.json'];\r\n    const path = possibleFiles.find(path => host.exists(path));\r\n\r\n    if (!path) {\r\n        throw new SchematicsException(`Could not find angular.json`);\r\n    }\r\n\r\n    const configBuffer = host.read(path);\r\n    if (!configBuffer) {\r\n        throw new SchematicsException(`Could not find angular.json`);\r\n    }\r\n\r\n    const content = configBuffer.toString();\r\n    let workspace: experimental.workspace.WorkspaceSchema;\r\n\r\n    try {\r\n        workspace = <any>parseJson(content, JsonParseMode.Loose) as experimental.workspace.WorkspaceSchema;\r\n    } catch (e) {\r\n        throw new SchematicsException(`Could not parse angular.json: ${e.message}`);\r\n    }\r\n\r\n    return { path, workspace };\r\n}\r\n\r\ninterface NgAddOptions {\r\n    project?: string;\r\n    siteID: string;\r\n    netlifyToken: string;\r\n}\r\n\r\nexport function netlifyBuilder(options: NgAddOptions): Rule {\r\n    return (tree: Tree, _context: SchematicContext) => {\r\n        // get the workspace details\r\n        const { path: workspacePath, workspace } = getWorkspace(tree);\r\n\r\n        // getting project name\r\n        if (!options.project) {\r\n            if (workspace.defaultProject) {\r\n                options.project = workspace.defaultProject;\r\n            } else {\r\n                throw new SchematicsException(\r\n                    'No Angular project selected and no default project in the workspace'\r\n                );\r\n            }\r\n        }\r\n\r\n        // Validating project name\r\n        const project = workspace.projects[options.project];\r\n        if (!project) {\r\n            throw new SchematicsException(\r\n                'The specified Angular project is not defined in this workspace'\r\n            );\r\n        }\r\n\r\n        // Checking if it is application\r\n        if (project.projectType !== 'application') {\r\n            throw new SchematicsException(\r\n                `Deploy requires an Angular project type of \"application\" in angular.json`\r\n            );\r\n        }\r\n\r\n        // Getting output path from Angular.json\r\n        if (\r\n            !project.architect ||\r\n            !project.architect.build ||\r\n            !project.architect.build.options ||\r\n            !project.architect.build.options.outputPath\r\n        ) {\r\n            throw new SchematicsException(\r\n                `Cannot read the output path(architect.build.options.outputPath) of the Angular project \"${options.project}\" in angular.json`\r\n            );\r\n        }\r\n\r\n        // adding deploy statement for builder\r\n        project.architect['deploy'] = {\r\n            \"builder\": \"@netlify-builder/deploy:deploy\",\r\n            \"options\": {\r\n                \"outputPath\": project.architect.build.options.outputPath,\r\n                \"netlifyToken\": options.netlifyToken,\r\n                \"siteId\": options.siteID,\r\n            }\r\n        }\r\n\r\n        tree.overwrite(workspacePath, JSON.stringify(workspace, null, 2));\r\n        return tree;\r\n    };\r\n}\r\n\r\nexport default function (options: NgAddOptions): Rule {\r\n    return chain([\r\n        netlifyBuilder(options),\r\n        addPackageJsonDependencies()\r\n    ]);\r\n}\r\n"]}