{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';\r\nimport { json } from '@angular-devkit/core';\r\nimport { Schema } from './schema';\r\nconst NetlifyAPI = require('netlify');\r\n\r\nexport default createBuilder<any>(\r\n    async (builderConfig: Schema, context: BuilderContext): Promise<BuilderOutput> => {\r\n        context.reportStatus(`Executing deploy...`);\r\n        context.logger.info(`Executing netlify deploy command ...... `);\r\n\r\n        if (builderConfig.noBuild) {\r\n            context.logger.info(`üì¶ Skipping build`);\r\n        } else {\r\n            const configuration = builderConfig.configuration || 'production';\r\n\r\n            const overrides = {\r\n                // this is an example how to override the workspace set of options\r\n                ...(builderConfig.baseHref && { baseHref: builderConfig.baseHref })\r\n            };\r\n\r\n            if (!context.target) {\r\n                throw new Error('Cannot build the application without a target');\r\n            }\r\n\r\n            const baseHref = builderConfig.baseHref ? `Your base-href: \"${builderConfig.baseHref}` : '';\r\n            context.logger.info(`üì¶ Building \"${context.target.project}\". Configuration: \"${configuration}\". ${baseHref}`);\r\n\r\n            const build = await context.scheduleTarget({\r\n                target: 'build',\r\n                project: context.target.project || '',\r\n                configuration\r\n            }, overrides as json.JsonObject);\r\n\r\n            const buildResult = await build.result;\r\n\r\n            if (buildResult.success !== true) {\r\n                context.logger.error(`‚ùå Application build failed`);\r\n                return {\r\n                    error: `‚ùå Application build failed`,\r\n                    success: false\r\n                };\r\n            }\r\n\r\n            context.logger.info(`‚úî Build Completed`);\r\n        }\r\n\r\n        const netlifyToken = process.env.NETLIFY_TOKEN || builderConfig.netlifyToken;\r\n        if (netlifyToken === '' || netlifyToken === undefined) {\r\n            context.logger.error(\"üö® Netlify Token not found !\");\r\n            return { success: false };\r\n        }\r\n\r\n        let siteId = process.env.NETLIFY_API_ID || builderConfig.siteId;\r\n        if (siteId === '' || siteId === undefined) {\r\n            // site id is needed if the create option is false\r\n            if (builderConfig.create === false) {\r\n                context.logger.error(\"üö® API ID (Site ID) not found !\");\r\n                return { success: false };\r\n            }\r\n        }\r\n\r\n        const client = new NetlifyAPI(netlifyToken, {\r\n            userAgent: 'netlify/js-client',\r\n            scheme: 'https',\r\n            host: 'api.netlify.com',\r\n            pathPrefix: '/api/v1',\r\n            globalParams: {}\r\n        });\r\n\r\n        // let check if the site exists\r\n        let site;\r\n        try {\r\n            // only when the site id is set\r\n            if (siteId) {\r\n                site = await client.getSite({ site_id: siteId });\r\n            }\r\n        } catch (e) {\r\n            switch (e.status) {\r\n                case 404:\r\n                    context.logger.error(`‚ùå Site \"${siteId}\" : Not found`);\r\n                    // if the create is false - just return the error\r\n                    if (builderConfig.create !== true) {\r\n                        return {\r\n                            success: false\r\n                        };\r\n                    }\r\n                    break;\r\n                case 401:\r\n                    context.logger.fatal(\"üö® Netlify: Unauthorized Token\");\r\n                    return {\r\n                        success: false\r\n                    };\r\n                default:\r\n                    // for all other errors \r\n                    return {\r\n                        error: e.message,\r\n                        success: false\r\n                    };\r\n            }\r\n        }\r\n\r\n        // lets create the site\r\n        if (!site && builderConfig.create) {\r\n            try {\r\n                context.logger.info(`Creating new site for the application`);\r\n                site = await client.createSite();\r\n                siteId = site.id as string;\r\n                context.logger.info(`‚úî Site \"${site.name}\" (${siteId}) created. Please update the angular.json so on the next run we can re-deploy on the same site`);\r\n            } catch (e) {\r\n                context.logger.error(\"üö® Unable to create the site\");\r\n                return {\r\n                    error: e.message,\r\n                    success: false\r\n                };\r\n            }\r\n        }\r\n\r\n        // if we still don't have the site return with error\r\n        if (!site) {\r\n            context.logger.error(\"üö® Unable to deploy as we don't have any context about the site\");\r\n            return {\r\n                error: \"üö® Unable to deploy as we don't have any context about the site\",\r\n                success: false\r\n            };\r\n        }\r\n\r\n        // lets deploy the application to the site\r\n        try {\r\n            context.logger.info(`Deploying project from üìÇ ./${builderConfig.outputPath}`);\r\n            const response = await client.deploy(siteId, builderConfig.outputPath);\r\n            context.logger.info(`‚úî Your updated site üï∏  is running at ${response.deploy.ssl_url}`);\r\n            return { success: true };\r\n        } catch (e) {\r\n            context.logger.error(\"‚ùå Deployment failed\");\r\n            return {\r\n                error: e.message,\r\n                success: false\r\n            };\r\n        }\r\n    });"]}